ls
nvim /etc/shells
which nu
chsh -s (which nu).stdout
chsh -s (which nu).string
chsh -s (which nu)
chsh -s (which nu).path
...(which nu).path
cat ...(which nu).path
ls ...(which nu).path
ls ...(which nu)
ls ...(which nu).stdout
ls ...(which nu)
ls (which nu)
(which nu)
(which nu).path
chsh -s (which nu).path
chsh -s ...(which nu).path
ls
cat /etc/shells
ls /etc/shells
/etc/shells
ls /etc/shells
open /etc/shells
(which nu).path
chsh -s ...(which nu).path
which nu
find / -name nu
find / -name "nu"
find / -file "nu"
find / --help
find / --name nu
find / -name nu
find / -name "nu"
find / -name 'nu'
find / -a  -name 'nu'
ls | find nu
ls .| find nu
ls . | find nu
ls . | find
ls -f | find 
ls -r / | find 
ls -R / | find 
ls -R
ls **
ls /**
aura ls /**
sudo  ls /**
sudo ls /**
ls /**
try ls /**
try | ls /**
try ls /nonexistent or echo "No files found"
ls -a /**
ls /root --recursive | where name == "nu"
ls /** | where name == "nu"
sudo ls /root --recursive | where name == "nu"
ls
ls /** | where name == "nu"
try { ls /** | where name == "nu" } catch{ continue }
try { ls /** | where name == "nu" }catch{ continue }
try { ls /** | where name == "nu" }catch{'fuck off' }
try { ls /** | where name == "nu" }catch{ 'fuck off' }
try { ls /** | where name == "nu" } catch { 'fuck off' }
try { ls /** | where name == "nu" } catch { continue }
try { ls /** | where name == "nu" } catch { break }
try { ls /** | where name == "nu" } catch { return  }
try { ls /** | where name == "nu" } catch { 'permision denied' }
try { ls /** | where name == "nu" } catch { 'permision denied' } | find nu
try { ls /** } catch { 'permision denied' } | find nu
try { ls /** } catch { 'permision denied' }
do --ignore-errors ls /**
do --ignore-errors { ls /** }
do --ignore-errors { ls /** } | find nu
do --ignore-errors { ls /** } | find -c nu
do --ignore-errors { ls /** } | find -c 'nu'
do --ignore-errors { ls /** } | find -c [nu]
do --ignore-errors { ls /** } | where name = nu
do --ignore-errors { ls /** }
do --ignore-errors { ls /** } | where name = "*nu"
do --ignore-errors { ls /** } | 1
do --ignore-errors { ls /** } | first
do --ignore-errors { ls /** } | first.name
do --ignore-errors { ls /** } | first | name
do --ignore-errors { ls /** } | first.name
do --ignore-errors { ls /** } | first | select name
do --ignore-errors { ls /** } | first | select name | type
do --ignore-errors { ls /** } | first | select name | describe
do --ignore-errors { ls /** } | select name | where name = "*nu"
do --ignore-errors { ls /** } | select name | where name == "*nu"
do --ignore-errors { ls /** } | where name == "*nu"
do --ignore-errors { ls /** } | where name =~ "nu$"
do --ignore-errors { ls /** } | flatten | where name =~ "nu$"
do --ignore-errors { ls /** } | drop | where name =~ "nu$"
do --ignore-errors { ls /** } | not nothing
do --ignore-errors { ls /** } | if nothing {"kill"}
ls / | each { do --ignore-errors { ls $it.name } } | flatten | select name type
ls / | each { do --ignore-errors { ls name } } | flatten | select name type
ls / | each { do --ignore-errors { name } } | flatten | select name type
ls / | each { do --ignore-errors { name } } | flatten | select name
ls / | each { do --ignore-errors { name } } | flatten 
ls / | each { do --ignore-errors } | flatten 
ls / | each { do --ignore-errors } | compact
do --ignore-errors { ls /** } | compact
do --ignore-errors { ls /** } | compact | where name =~ nu
do --ignore-errors { ls /** } | compact | where name == nu
do --ignore-errors { ls /** } | compact | where name =~ "nu"
do --ignore-errors { ls /** } | compact | where name == "nu"
do --ignore-errors { ls /** } | compact | where name == "nu$"
do --ignore-errors { ls /** } | compact | where name =~ "nu$"
do { do --ignore-errors { ls /** } | compact | where name =~ "nu$" }
ls ** | ignore-errors | where name == "king"
try { ls ** } catch { "kin" }
try { ls ** } catch { null }
try { ls /** } catch { null }
try { ls /** } catch { nothing }
try { ls /** } catch { noll } | compact
try { ls /** } catch { } 
try { ls /** } catch { "ll" } 
do { ls /** }
do --ignore-errors { ls /** } | compact
do --ignore-errors { ls /** } | compact | first
do --ignore-errors { ls /** } | compact | get name
do --ignore-errors { ls /** } | compact | where name =~ "nu$"
do --ignore-errors { ls /** } | compact | str ends-with "nu"
do --ignore-errors { ls /** } | compact | where str ends-with "nu" 
do --ignore-errors { ls /** } | compact | where name ends-with "nu" 
fd 
fd -h
do --ignore-errors { ls /** } | find -c [name] -r "nu$"
do --ignore-errors { ls /** } | path parse | get filename 
do --ignore-errors { ls /** } | path parse
do --ignore-errors { ls /** } | get name | path parse
ls | get path | path parse | get filename
ls | get name | path parse | get filename
ls | get name | name parse | get filename
ls | get name | path parse
ls | get name | path parse | get stem
do --ignore-errors { ls }| get name | path parse | get stem
do --ignore-errors { ls /** }| get name | path parse | get stem
do --ignore-errors { ls /** } | compact | get name | path parse | get stem
do --ignore-errors { ls /** } | compact | get name | path parse | get stem 
do --ignore-errors { ls /** } | compact | get name | path parse | get stem | where stem ~= "nu$"
do --ignore-errors { ls /** } | compact | get name | path parse | get stem | where stem =~ "nu$"
do --ignore-errors { ls /** } | compact | get name | path parse | get stem | first
do --ignore-errors { ls /** } | compact | get name | path parse | get stem | first 2
do --ignore-errors { ls /** } | compact | get name | path parse | where stem =~ "nu$"
do --ignore-errors { ls /** } | compact | get name | path parse | stem ends-with "nu" 
do --ignore-errors { ls /** } | compact | get name | path parse | where stem ends-with "nu" 
do --ignore-errors { ls /** } | compact | get name | path parse | drop column 1 |where stem ends-with "nu" 
do --ignore-errors { ls /** } | compact | get name | path parse | drop column 1 | get stem 
do --ignore-errors { ls /** } | compact | get name | path parse | drop column 1 | get stem | first
do --ignore-errors { ls /** } | compact | get name | path parse | drop column 1 | get stem | str ends-with nu 
do --ignore-errors { ls /** } | compact | get name | path parse | drop column 1 | get stem | where str ends-with nu 
do --ignore-errors { ls /** } | compact | get name | path parse | drop column 1 | get stem | where . ends-with nu 
do --ignore-errors { ls /** } | compact | get name | path parse | drop column 1 | where stem ends-with nu 
do --ignore-errors { ls /** } | compact | get name | path parse | ls
do --ignore-errors { ls /** } | compact | get name | path parse
do --ignore-errors { ls /** } | compact | get name | path parse | first
ls **/* | where type == file | get path | path parse | where stem =~ "nu$" | get stem
ls **/* | where type == file | get name | path parse | where stem =~ "nu$" | get stem
ls /* | where type == file | get name | path parse | where stem =~ "nu$" | get stem
ls /** | where type == file | get name | path parse | where stem =~ "nu$" | get stem
ls
pwd
ls /** | where type == file | get name | path parse | where stem =~ "nu$" | get stem
do --ignore-errors { ls /** } | where type == file | get name | path parse | where stem =~ "nu$" | get stem
do --ignore-errors { ls /** } | compact | where type == file | get name | path parse | where stem =~ "nu$" | get stem
do --ignore-errors { ls /** } | compact | get name | path parse | where stem =~ "nu$" | get stem
sudo ls /**  | compact | get name | path parse | where stem =~ "nu$" | get stem
sudo ls /** 
sudo ls
sudo ls /I
sudo ls /*
sudo ls /**
sudo find / -name 'king' 2>/dev/null
read -s password
open /dev/tty | into string
passwd 
su root
sudo ls
sudo -v
sudo passwd -u root
sudo -S ls /etc
sudo -l
sleep 1
sleep 1000ms
sleep 1s
sleep 1000ms
sudo true
systemctl status systemd-homed
ls
which find
which /usr/bin/find
/usr/bin/find -h
/usr/bin/find -help
/usr/bin/find / -name nu 
which nu
sudo pacman -Rns nushell
nivm .
nvim .
nvim /etc/
nvim /etc/shells
sudo nvim /etc/shells
chsh -s ...(which nu).path
ls
ls **/*.txt
ls /*.txt
ls /*8/*.txt
ls /**/*.txt
ls */**config.nu
ls ~/*config.nu
ls ~/config.nu
ls ~/**/config.nu
ls ~/**/*config.nu
ls ~/**/.bashrc*
ls ~/**/config.nu*
ls ~/**/lua*
ls ~/**/lazy*
ls -f ~/**/lazy*
ls -a ~/**/lazy*
ls -a /**/lazy*
ls **/*.rs
ls **/*.txt
ls **/*.config
ls -f **/*
ls -f **/*ules
ls -f **/ules
ls -f **/.config
ls -f **/*.config
ls -f /**/*.config
ls -f ./**/*.config
ls -f ./**/
ls --all ./**/
ls --all ./**/*.config
ls --all ./**/*config.nu
config nu
$env.config.buffer_editor = (which nvim )
$env.config.buffer_editor = ...(which nvim )
$env.config.buffer_editor = ...(which nvim ).name
$env.config.buffer_editor = ...(which nvim ).path
which nvim 
$env.config.buffer_editor = ...(which nvim).path
...(which nvim).path
(which nvim).path
...(which nvim).path
...(which nvim).path.first
$env.config.buffer_editor = ...(which nvim).path
$env.config.buffer_editor = "nvim"
config nu
nvim nushell
nvim .bashrc
nvim .config/nushell/config.nu
$EDITOR
nvim .config/nushell/config.nu
$env.EDITOR
$env
let-env VISUAL = "nvim"
let-env VISUAL="nvim"
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
vi .config/nushell/config.nu
nvim .config/nushell/config.nu
vim
vim .config/nushell/config.nu
vi .config/nushell/config.nu
nvim .config/nushell/config.nu
/usr/bin/nvim .config/nushell/
source .config/nushell/config.nu
nvim .config/nushell/config.nu
scope aliases
vi .config/nushell/config.nu
less .config/nushell/config.nu
/usr/bin/nvim .config/nushell/config.nu
source .config/nushell/config.nu
/usr/bin/nvim .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
/usr/bin/nvim .config/nushell/config.nu
vi .config/nushell/config.nu
/usr/bin/nvim .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
air
air 
go mod init 
go
go run main
$env.PATH
$env.PATH.string
$env.PATH.
nvim .config/nushell/
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
source .config/nushell/config.nu
env.Path
env.PATH
$env.PATH
ls
go run main
ls
go run main
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
$env.PATH
nvim .config/nushell/config.nu
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
$env.PATH
vi .config/nushell/config.nu
source .config/nushell/config.nu
$env.PATH
vi .config/nushell/config.nu
$env.PATH
source .config/nushell/config.nu
$env.PATH
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
$env.PATH
vi .config/nushell/config.nu
source .config/nushell/config.nu
vi .config/nushell/config.nu
source .config/nushell/config.nu
$env.PATH
nvim .config/nushell/config.nu
$env.GOPATH
nvim .config/nushell/config.nu
$env.GOPATH
nvim .config/nushell/config.nu
$env.GOPATH
$env.PATH
air
$env.PATH
$env
nvim .config/nushell/config.nu
vi
vim
nvim 
nvim .config/nushell/config.nu
aura ls
ls
rm -rf tmp/
ls
nvim .config/nushell/config.nu
sudo ls
ls
nvim 
nvim .
nvim .config/nushell/config.nu
$env.MOZ_DISABLE_RDD_SANDBOX
nvim .config/nushell/config.nu
$env.LIBVA_DRIVER_NAME
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
source .config/nushell/config.nu
$env.PATH
nvim .config/nushell/config.nu
source .config/nushell/config.nu
$env
nvim .
tmux-sessionizer 
nvim .
nvim .config/nushell/config.nu
source .config/nushell/config.nu
nvim .config/nushell/config.nu
nvim .
tmux neww tmux-sessionizer
tmux
nvim .
tmux-sessionizer 
tmux neww tmux-sessionizer
ls
nvim .
config nu 
ls
config nu 
ls
nvim .
config env 
ls
nivm .
nvim .
git diff
nvim .
lds
ls
nvim .
tmux 
config tmux
nvim .config/tmux/tmux.conf
nvim .config/tmux-sessionizer/
nvim .gitignore
nvim .
tmux
nvim .
$env.SHELL
chsh -s ...(which zsh).path $env.USER
chsh -s ...(which nushell).path $env.USER
(which nushell).path
chsh -s ...(which nu).path $env.USER
chsh -s ...(which nu).path
grep "^$USER:"
grep "^$USER:" /etc/passwd<\n>
grep "^$USER:" /etc/passwd
grep $"($env.USER)/etc/passwd"
$env.USER
nvim /etc/passwd
reboot
ls
tmux
ls
config nu
fzf
fzf -help
fzf --help
nvim --bash
nvim .
fzf --bash
nivm .
nvim .
